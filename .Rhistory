runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a = ""
a = character(0)
a
is.null(a)
is.na(a)
is.empty(a)
is.character(s)
is.character(a)
a
is_empty(a)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rtools_path()
has_rtools()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a = 1
exists(a)
exists("a")
exists("b")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
install.packages("reactlog")
reactlog::reactlog_enable()
runApp()
shiny::reactlogShow()
shiny::reactlogShow()
runApp()
runApp()
runApp()
runApp()
help(package="renv")
renv::status()
renv::snapshot()
renv::status()
renv::status()
shiny::runApp('~/app_development/autoreport2023')
getwd()
runApp()
runApp()
runApp()
runApp()
shiny::reactlogShow()
runApp()
reactlog::reactlog_enable()
runApp()
shiny::reactlogShow()
runApp()
help(package="renv")
install.packages("renv")
renv::record("renv@1.0.3")
renv::status()
shiny::runApp()
?p
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('testthat')
library("shinytest")
install.packages("shinytest")
library(shinytest)
shinytest::installDependencies()
renv::status()
renv::snapshot()
renv::status()
remove.packages("shinytest")
renv::status()
renv::status()
getwd()
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
expect_false(input$go, label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex"
data2_path <- "./tests/data2_ex"
session$setInputs(file= list(datapath = data1_path))
session$setInputs(file= list(datapath = data2_path))
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
library(testthat)
library(shiny)
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
expect_false(input$go, label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex"
data2_path <- "./tests/data2_ex"
session$setInputs(file= list(datapath = data1_path))
session$setInputs(file= list(datapath = data2_path))
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
ui <- fluidPage(
useShinyjs(),
fluidPage(
# tags$h1('Compare two projects'),
# tags$h3("Compare peptide and kinase results of repeated projects.", class = "paragraph-lead"),
tags$div(class = "jumbotron text-center", style = "margin-bottom:0px;margin-top:0px",
tags$h1(class = 'jumbotron-heading', stye = 'margin-bottom:0px;margin-top:0px', 'Compare two projects'),
p('Compare peptide and kinase results of repeated projects.')
),
sidebarLayout(
sidebarPanel(
h3("Usage"),
p("Save phosphosite and kinase analysis result files (BioNavigator or Tercen) of the two projects in separate folders.
In each folder, the files should have the exact same naming.
In each file, the namespaces should be exactly the same.
Name files the same as for automated reporting."),
h2("Parameters"),
dateInput("date", "Report Date"),
textInput("data1_name", "Data 1 name", value = 'data1'),
textInput("data2_name", "Data 2 name", value = 'data2'),
numericInput('pcutoff', "P value cutoff", value = 0.05, min = 0.0001, max = 1),
numericInput('fscorecutoff', "Final Score cutoff", value = 1.3, min = 0, max = 12),
fluidRow(
disabled(actionButton("go", "GO", class = "btn-lg btn-success")),
br(),
uiOutput("download")
)
),
mainPanel(
br(),
h1("Files"),
fileInput("data1_files", "Upload .csv or .txt files from data1.", multiple = TRUE, accept = c(".csv", ".txt")),
fileInput("data2_files", "Upload .csv or .txt files from data2.", multiple = TRUE, accept = c(".csv", ".txt")),
h2("Data 1 files"),
tableOutput('files1'),
h2("Data 2 files"),
tableOutput('files2')
)
)
)
)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),
fluidPage(
# tags$h1('Compare two projects'),
# tags$h3("Compare peptide and kinase results of repeated projects.", class = "paragraph-lead"),
tags$div(class = "jumbotron text-center", style = "margin-bottom:0px;margin-top:0px",
tags$h1(class = 'jumbotron-heading', stye = 'margin-bottom:0px;margin-top:0px', 'Compare two projects'),
p('Compare peptide and kinase results of repeated projects.')
),
sidebarLayout(
sidebarPanel(
h3("Usage"),
p("Save phosphosite and kinase analysis result files (BioNavigator or Tercen) of the two projects in separate folders.
In each folder, the files should have the exact same naming.
In each file, the namespaces should be exactly the same.
Name files the same as for automated reporting."),
h2("Parameters"),
dateInput("date", "Report Date"),
textInput("data1_name", "Data 1 name", value = 'data1'),
textInput("data2_name", "Data 2 name", value = 'data2'),
numericInput('pcutoff', "P value cutoff", value = 0.05, min = 0.0001, max = 1),
numericInput('fscorecutoff', "Final Score cutoff", value = 1.3, min = 0, max = 12),
fluidRow(
disabled(actionButton("go", "GO", class = "btn-lg btn-success")),
br(),
uiOutput("download")
)
),
mainPanel(
br(),
h1("Files"),
fileInput("data1_files", "Upload .csv or .txt files from data1.", multiple = TRUE, accept = c(".csv", ".txt")),
fileInput("data2_files", "Upload .csv or .txt files from data2.", multiple = TRUE, accept = c(".csv", ".txt")),
h2("Data 1 files"),
tableOutput('files1'),
h2("Data 2 files"),
tableOutput('files2')
)
)
)
)
server <- function(input, output, session) {
make_datafolders <- function(folders) {
for (folder in folders){
if (!dir.exists(folder)) {
dir.create(folder)
}
}
}
remove_datafolders <- function(folders) {
for (folder in folders){
if (dir.exists(folder)) {
unlink(folder, recursive = T)
}
}
}
make_result_zip <- function() {
file_name <- paste0(input$data2_name, " vs ", input$data1_name, "_results_", format(input$date, "%y%m%d"), ".zip")
zip(file_name, c("results/"))
}
move_datafiles <- function(datafiles, folder){
for (i in 1:nrow(datafiles)) {
aFile <- datafiles[i,]
file.copy(from = aFile$datapath, to = file.path(folder, aFile$name))
}
}
observe({
if (is.null(input$data1_files) & is.null(input$data2_files)) {
return()
} else if (!is.null(input$data1_files) & !is.null(input$data2_files)) {
remove_datafolders(c('results', 'data1', 'data2'))
make_datafolders(c('data1', 'data2', 'results'))
move_datafiles(input$data1_files, "data1")
move_datafiles(input$data2_files, "data2")
enable("go")
}
})
output$files1 <- renderTable(input$data1_files)
output$files2 <- renderTable(input$data2_files)
observeEvent(input$go, {
withProgress(message = "Working on results...", {
data1 <<- 'data1'
data2 <<- 'data2'
data1_name <<- input$data1_name
data2_name <<- input$data2_name
fscorecutoff <<- input$fscorecutoff
pcutoff <<- input$pcutoff
source("main.R")
})
showNotification("Results complete!", type = "message")
make_result_zip()
output$download <- renderUI({
downloadButton("download_results", "Download results")
})
outputOptions(output, "download_results", suspendWhenHidden = FALSE)
})
output$download_results <- downloadHandler(
filename = function() {
paste0(input$data2_name, " vs ", input$data1_name, "_results_", format(input$date, "%y%m%d"), ".zip")
},
content = function(file) {
file.copy(from = paste0(input$data2_name, " vs ", input$data1_name, "_results_", format(input$date, "%y%m%d"), ".zip"),
to = file)
},
contentType = "application/zip"
)
}
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
expect_false(input$go, label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex"
data2_path <- "./tests/data2_ex"
session$setInputs(file= list(datapath = data1_path))
session$setInputs(file= list(datapath = data2_path))
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
expect_true(is.null(input$go), label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex"
data2_path <- "./tests/data2_ex"
session$setInputs(file= list(datapath = data1_path))
session$setInputs(file= list(datapath = data2_path))
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
is.null(NULL)
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
expect_true((input$go == NULL), label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex"
data2_path <- "./tests/data2_ex"
session$setInputs(file= list(datapath = data1_path))
session$setInputs(file= list(datapath = data2_path))
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
expect_true(is.null(input$go), label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex"
data2_path <- "./tests/data2_ex"
session$setInputs(file= list(datapath = data1_path))
session$setInputs(file= list(datapath = data2_path))
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
is.null(NULL)
is.null('NULL')
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
print(input$go)
expect_true(is.null(input$go), label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex"
data2_path <- "./tests/data2_ex"
session$setInputs(file= list(datapath = data1_path))
session$setInputs(file= list(datapath = data2_path))
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
print(is.null(input$go))
expect_true(is.null(input$go), label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex"
data2_path <- "./tests/data2_ex"
session$setInputs(file= list(datapath = data1_path))
session$setInputs(file= list(datapath = data2_path))
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
expect_true(is.null(input$go), label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex"
data2_path <- "./tests/data2_ex"
session$setInputs(file= list(datapath = data1_path))
session$setInputs(file= list(datapath = data2_path))
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
#expect_true(is.null(input$go), label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex"
data2_path <- "./tests/data2_ex"
session$setInputs(file= list(datapath = data1_path))
session$setInputs(file= list(datapath = data2_path))
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
#expect_true(is.null(input$go), label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex"
data2_path <- "./tests/data2_ex"
session$setInputs(file= list(datapath = data1_path))
session$setInputs(file= list(datapath = data2_path))
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
#expect_true(is.null(input$go), label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex"
data2_path <- "./tests/data2_ex"
session$setInputs(file= list(datapath = data1_path))
session$setInputs(file= list(datapath = data2_path))
print(input$go)
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
expect_true(is.null(input$go), label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex"
data2_path <- "./tests/data2_ex"
session$setInputs(file=list(datapath = data1_path))
session$setInputs(file=list(datapath = data2_path))
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
getwd()
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
expect_true(is.null(input$go), label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex/"
data2_path <- "./tests/data2_ex/"
session$setInputs(file=list(datapath = data1_path))
session$setInputs(file=list(datapath = data2_path))
print()
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
expect_true(is.null(input$go), label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex/"
data2_path <- "./tests/data2_ex/"
session$setInputs(file=list(datapath = data1_path))
session$setInputs(file=list(datapath = data2_path))
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
expect_true(is.null(input$go), label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex/"
data2_path <- "./tests/data2_ex/"
session$setInputs(file=list(datapath = data1_path))
session$setInputs(file=list(datapath = data2_path))
print(list.files('data1'))
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
testServer(server, {
# Test 1: Check if the 'go' button is initially disabled
expect_true(is.null(input$go), label="GO button should be initially disabled")
# Test 2: Upload files and check if the 'go' button becomes enabled
# Test 3: test if the go button leads to zip download
data1_path <- "./tests/data1_ex/"
data2_path <- "./tests/data2_ex/"
session$setInputs(file=list(datapath = data1_path))
session$setInputs(file=list(datapath = data2_path))
print(list.files('data1'))
expect_true(input$go, label="GO button should be enabled after uploading files")
expect_true(output$download, label="Clicking go button should lead to enabling download button")
})
renv::status()
?renv::status()
renv::snapshot()
