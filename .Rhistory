renv::restore()
install.packages("optparse")
modelname <- NULL
if(modelname)
is.null(modelname)
a <- list(a = a, b = b)
a <- list(1 = a, 2 = b)
a <- list(1, 2)
a
sub(1, "", a)
b <- sub(1, "". a)
b <- sub(1, "", a)
b
b <- sub("1", "", a)
b
b <- a[grepl(1, a)]
b
a <- list("c", "b")
a
df <- data.frame(e = c(1, "b"))
df
df[df$e %in% a,]
df <- data.frame(e = c(1, "b"), f = c(1,2))
df[df$e %in% a,]
a <- c(1, 2)
b <- c(2, 4)
b <- c(1, 3)
a != b
any(a !=b)
b <- a
any(a !=b)
?dev_scaler
??dev_scaler
renv::status()
install.packages("tidyverse")
renv::snapshot()
install.packages("optparse")
renv::snapshot()
a = 10
b = log(a)
c = a + 10
c
b
a = 10
b = log(a)
c = b + 10
c
a = "2"
b = log(a)
a = "2"
b = log(a)
a = 10
b = log(a)
c = b + 10
print(c)
d = 2+2
print(d)
a = "10"
b = log(a)
a = "10"
b = try(log(a))
c = try(b + 10)
print(c)
d = 2+2
print(d)
library(tidyverse)
renv::restore()
install.packages("lattice")
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(optparse)
source("R/PhosphositeAnalysis_c2a.R")
source("R/PhosphositeAnalysis_c2a.R")
source("R/PhosphositeAnalysis_c2a.R")
source("R/PhosphositeAnalysis_c2a.R")
read_psites_from_folder(folder = "../compare2analyses_data/example1", foldernum = '1')
read_psites_from_folder(folder = "../compare2analyses_data/example2", foldernum = '2')
# Check if each BN LFC file has a matching p file in a folder
are_lfcs_ps_paired(lfcs1, ps1, foldernum = '1')
are_lfcs_ps_paired(lfcs2, ps2, foldernum = '2')
# Check if each BN LFC and p file has a matching LFC and p file in the other folder
is_data_in_2folders_paired(lfcs1, lfcs2, ps1, ps2)
source("R/PhosphositeAnalysis_c2a.R")
# Check if each BN LFC and p file has a matching LFC and p file in the other folder
is_data_in_2folders_paired(lfcs1, lfcs2, ps1, ps2)
# Check if each BN LFC and p file has a matching LFC and p file in the other folder
is_data_in_2folders_paired(lfcs1, lfcs2, ps1, ps2)
source("R/PhosphositeAnalysis_c2a.R")
# Check if each BN LFC and p file has a matching LFC and p file in the other folder
is_data_in_2folders_paired(lfcs1, lfcs2, ps1, ps2)
lfc1_names
lfc2_names
p1_names
p2_names
lfc1_names == lfc2_names
library(tidyverse)
source("R/PhosphositeAnalysis_c2a.R")
source("R/KinaseAnalysis.R")
defaultW <- getOption("warn")
options(warn = -1)
read_psites_from_folder(folder = "../compare2analyses_data/example1", foldernum = '1')
read_psites_from_folder(folder = "../compare2analyses_data/example2", foldernum = '2')
# Check if each BN LFC file has a matching p file in a folder
are_lfcs_ps_paired(lfcs1, ps1, foldernum = '1')
are_lfcs_ps_paired(lfcs2, ps2, foldernum = '2')
# Check if each BN LFC and p file has a matching LFC and p file in the other folder
is_data_in_2folders_paired(lfcs1, lfcs2, ps1, ps2)
# 2. get peptide results
source("R/PhosphositeAnalysis_c2a.R")
get_peptide_results_bn(lfcs1, ps1, lfcs2, ps2, pcutoff = 0.05,
data1_name = "data1", data2_name = "data2")
# 2. get peptide results
source("R/PhosphositeAnalysis_c2a.R")
is_data_in_2folders_paired_tercen(tercen1, tercen2)
print("Filenames are correct.")
# 2. get peptide results
source("R/PhosphositeAnalysis_c2a.R")
get_peptide_results_tercen(tercen1, tercen2, pcutoff = 0.05,
data1_name = "data1", data2_name = "data2")
sign1
sign1
comparison
read_psites_from_folder(folder = opt$folder1, foldernum = '1')
read_psites_from_folder(folder = opt$folder1, foldernum = '2')
read_psites_from_folder(folder = "../compare2analyses_data/example1", foldernum = '1')
read_psites_from_folder(folder = "../compare2analyses_data/example2", foldernum = '2')
are_lfcs_ps_paired(lfcs1, ps1, foldernum = '1')
are_lfcs_ps_paired(lfcs2, ps2, foldernum = '2')
# Check if each BN LFC and p file has a matching LFC and p file in the other folder
is_data_in_2folders_paired_bn(lfcs1, lfcs2, ps1, ps2)
is_data_in_2folders_paired_tercen(tercen1, tercen2)
print("Filenames are correct.")
# 2. get peptide results
source("R/PhosphositeAnalysis_c2a.R")
get_peptide_results_bn(lfcs1, ps1, lfcs2, ps2, pcutoff = 0.05,
data1_name = "data1", data2_name = "data2")
# 2. get peptide results
source("R/PhosphositeAnalysis_c2a.R")
get_peptide_results_bn(lfcs1, ps1, lfcs2, ps2, pcutoff = 0.05,
data1_name = "data1", data2_name = "data2")
# 2. get peptide results
source("R/PhosphositeAnalysis_c2a.R")
get_peptide_results_bn(lfcs1, ps1, lfcs2, ps2, pcutoff = 0.05,
data1_name = "data1", data2_name = "data2")
read_psites_from_folder(folder = "../compare2analyses_data/example1", foldernum = '1')
read_psites_from_folder(folder = "../compare2analyses_data/example2", foldernum = '2')
get_peptide_results_bn(lfcs1, ps1, lfcs2, ps2, pcutoff = 0.05,
data1_name = "data1", data2_name = "data2")
read_psites_from_folder(folder = "../compare2analyses_data/example1", foldernum = '1')
read_psites_from_folder(folder = "../compare2analyses_data/example2", foldernum = '2')
# 2. get peptide results
source("R/PhosphositeAnalysis_c2a.R")
get_peptide_results_bn(lfcs1, ps1, lfcs2, ps2, pcutoff = 0.05,
data1_name = "data1", data2_name = "data2")
sign1
sign2
read_psites_from_folder(folder = "../compare2analyses_data/example1", foldernum = '1')
read_psites_from_folder(folder = "../compare2analyses_data/example2", foldernum = '2')
# 2. get peptide results
source("R/PhosphositeAnalysis_c2a.R")
get_peptide_results_bn(lfcs1, ps1, lfcs2, ps2, pcutoff = 0.05,
data1_name = "data1", data2_name = "data2")
# 2. get peptide results
source("R/PhosphositeAnalysis_c2a.R")
get_peptide_results_bn(lfcs1, ps1, lfcs2, ps2, pcutoff = 0.05,
data1_name = "data1", data2_name = "data2")
# 2. get peptide results
source("R/PhosphositeAnalysis_c2a.R")
get_peptide_results_bn(lfcs1, ps1, lfcs2, ps2, pcutoff = 0.05,
data1_name = "data1", data2_name = "data2")
# 2. get peptide results
source("R/PhosphositeAnalysis_c2a.R")
get_peptide_results_bn(lfcs1, ps1, lfcs2, ps2, pcutoff = 0.05,
data1_name = "data1", data2_name = "data2")
get_peptide_results_bn(lfcs1, ps1, lfcs2, ps2, pcutoff = 0.05,
data1_name = "data1", data2_name = "data2")
sign1
# 2. get peptide results
source("R/PhosphositeAnalysis_c2a.R")
get_peptide_results_bn(lfcs1, ps1, lfcs2, ps2, pcutoff = 0.05,
data1_name = "data1", data2_name = "data2")
get_peptide_results_tercen(tercen1, tercen2, pcutoff = 0.05,
data1_name = "data1", data2_name = "data2")
sign1
sign1
read_psites_from_folder(folder = "../compare2analyses_data/example1", foldernum = '1')
read_psites_from_folder(folder = "../compare2analyses_data/example2", foldernum = '2')
# 2. get peptide results
source("R/PhosphositeAnalysis_c2a.R")
read_psites_from_folder(folder = "../compare2analyses_data/example1", foldernum = '1')
read_psites_from_folder(folder = "../compare2analyses_data/example2", foldernum = '2')
# 2. get peptide results
source("R/PhosphositeAnalysis_c2a.R")
get_peptide_results_tercen(tercen1, tercen2, pcutoff = 0.05,
data1_name = "data1", data2_name = "data2")
# 2. get peptide results
source("R/PhosphositeAnalysis_c2a.R")
get_peptide_results_tercen(tercen1, tercen2, pcutoff = 0.05,
data1_name = "data1", data2_name = "data2")
uka_files1 <- list.files(path = opt$folder1, pattern = "UKA_", full.names = TRUE)
uka_files1 <- list.files(path = opt$folder1, pattern = "UKA_", full.names = TRUE)
uka_files1 <- list.files(path = "../compare2analyses_data/example1", pattern = "UKA_", full.names = TRUE)
uka_files2 <- list.files(path = "../compare2analyses_data/example1", pattern = "UKA_", full.names = TRUE)
stopifnot("Number of UKA files in data1 and data2 folders don't match!" =
length(uka_files1) == length(uka_files2))
# 4. Get UKA results
source("R/KinaseAnalysis.R")
get_uka_results(uka_files1, uka_files2, data1_name, data2_name, fscorecutoff)
comparison
comparison
comparison <- sub(".*\\/(.+)[.txt|.csv].*", "\\1", uka_files1[[i]])
comparison
comparison <- sub(".*\\/(.+).(txt|csv).*", "\\1", uka_files1[[i]])
comparison
# 4. Get UKA results
source("R/KinaseAnalysis.R")
get_uka_results(uka_files1, uka_files2, data1_name, data2_name, fscorecutoff)
get_uka_results(uka_files1, uka_files2, data1_name ="data1", data2_name = 'data2', fscorecutoff)
# 4. Get UKA results
source("R/KinaseAnalysis.R")
get_uka_results(uka_files1, uka_files2, data1_name ="data1", data2_name = 'data2', fscorecutoff)
uka1
View(uka1)
renv::status()
renv::snapshot()
install.packages("shiny")
renv::status()
renv::status()
renv::status()
getwd()
getwd()
renv::status()
install.packages("tidyverse")
renv::status()
install.packages("curl")
install.packages("dplyr")
renv::remove("generics")
renv::remove("pillar")
renv::remove("fansi")
renv::remove("tidyselect")
renv::remove("pkgconfig")
renv::remove("tibble")
renv::remove("utf8")
renv::remove("vctrs")
install.packages("dplyr")
renv::snapshot()
renv::status()
library(shiny)
library(shiny)
shiny::runApp()
install.packages("shinyjs")
library(shinyjs)
runApp()
runApp()
runApp()
runApp()
runApp()
renv::status()
install.packages("tidyverse")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
zip_name
runApp()
ls
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a = ""
a = character(0)
a
is.null(a)
is.na(a)
is.empty(a)
is.character(s)
is.character(a)
a
is_empty(a)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rtools_path()
has_rtools()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a = 1
exists(a)
exists("a")
exists("b")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
install.packages("reactlog")
reactlog::reactlog_enable()
runApp()
shiny::reactlogShow()
shiny::reactlogShow()
runApp()
runApp()
runApp()
runApp()
